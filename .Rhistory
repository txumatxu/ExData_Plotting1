github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token
myapp <- oauth_app("github", key="491103adeb6ae54777c5",secret="dd133dddbb3966f2d69eeeebab7cbadc4e051a92")
myapp <- oauth_app("github",
key = "491103adeb6ae54777c5",
secret = "dd133dddbb3966f2d69eeeebab7cbadc4e051a92")
github_token <- oauth2.0_token(oauth_endpoints("github"),myapp)
github_token
gtoken <- config(token = github_token)
gtoken
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
req
https://github.com/login/oauth/authorize?client_id=491103adeb6ae54777c5&scope=&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&response_type=code
install.packages("httpuv")
oauth_endpoints("github")
myapp <- oauth_app("github",key = "491103adeb6ae54777c5",secret = "6e84397e30f175419c86ca52d8aeef5216d68585")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://github.com/hadley/httr/blob/master/demo/oauth2-github.r", gtoken)
req
contenido<-content(req)
contenido
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
contenido<-content(req)
contenido
stop_for_status(req)
contenido[[1]]
contenido[[2]]
contenido[[3]]
contenido[[4]]
contenido[[5]]
contenido[[6]]
contenido[[7]]
library(XML)
fileURL<-"http://biostat.jhsph.edu/~jleek/contact.html"
doc<-xmlParse(fileURL)
doc
doc<-xmlParse(fileURL,useInternalNodes = TRUE)
doc
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlcode=readLines(con)
htmlcode
htmlcode[10]
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
fileURL<-https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ""
fileURL<-https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for
fileURL<-https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURL,"archivo.for")
forfile<-read.table("archivo.for")
read.fwf("archivo.for",skip=4,witdth=c(14,4,9,4,9,4,9,4,9))
read.fwf("archivo.for",skip=4,witdths=c(14,4,9,4,9,4,9,4,9))
read.fwf("archivo.for",skip=4,widths=c(14,4,9,4,9,4,9,4,9))
readfile<-read.fwf("archivo.for",skip=4,widths=c(14,4,9,4,9,4,9,4,9))
head(readfile)
readfile<-read.fwf("archivo.for",skip=5,widths=c(14,4,9,4,9,4,9,4,9))
head(readfile)
readfile<-read.fwf("archivo.for",skip=4,widths=c(14,4,9,4,9,4,9,4,9))
head(readfile)
readfile<-read.fwf("archivo.for",skip=4,widths=c(14,5,9,4,9,4,9,4,9))
head(readfile)
readfile[,4
]
sum(readfile[,4])
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "cameras.csv")
cameraData <- read.csv("cameras.csv")
names(cameraData)
tolowae(names(cameraData))
tolower(names(cameraData))
toupper(names(cameraData))
splitnames = strsplit(names(cameraData),"\\.")
splitnames
tolower(names(cameraData))
sub("\\.","",names(cameraData))
grep("Alameda",cameraData$intersection)
table(grepl("Alameda",cameraData$intersection))
grep("Alameda",cameraData$intersection,value = TRUE)
grep("Alamedas",cameraData$intersection,value = TRUE)
grep("Alamedas",cameraData$intersection)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl,destfile = "community.csv")
communityData <- read.csv("community.csv")
strsplit(names(communityData),"wgtp")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv "
download.file(fileUrl,destfile = "rankedCountries.csv")
countriesData <- read.csv("rankedCountries.csv")
countriesData$Gross.domestic.product.2012
mean(countriesData$Gross.domestic.product.2012)
mean(countriesData$Gross.domestic.product.2012, na.rm = TRUE)
countriesData$X.1
countriesData$X.2
countriesData$X.3
countriesData$X
countriesData$Gross.domestic.product.2012
countriesData <- read.csv("rankedCountries.csv",skip = 4)
countriesData$Gross.domestic.product.2012
countriesData$X
countriesData$X.1
countriesData[1:190]
countriesData[1:190,]
countriesData[1:190,]$X.4
sub(",","",countriesData[1:190,]$X.4)
mean(sub(",","",countriesData[1:190,]$X.4))
mean(as.numeric(sub(",","",countriesData[1:190,]$X.4))
)
countriesData[1:190,]$X.4
sub(',','',countriesData[1:190,]$X.4)
as.numeric(gsub(',','',countriesData[1:190,]$X.4))
mean(as.numeric(gsub(',','',countriesData[1:190,]$X.4)))
head(countriesData)
grep("^United",countriesData$X.3)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl,destfile = "educational.csv")
educationalData <- read.csv("educational.csv")
head(educationalData)
getwd()
grep("fiscal",educationalData)
grep("Fiscal",educationalData$)
grep("Fiscal",educationalData)
grep("Fiscal",educationalData$Special.Notes)
fiscalIndex=grepl("Fiscal",educationalData$Special.Notes)
fiscalIndex
educationalData$CountryCode[fiscalIndex]
countrylists<.educationalData$CountryCode[fiscalIndex]
countrylists<-educationalData$CountryCode[fiscalIndex]
count.fields()
countrylists
countriesData$X
countriesData$X[countrylists]
countrywithend<-educationalData[fiscalIndex]
fiscalIndex=grepl("Fiscal year end: June",educationalData$Special.Notes)
fiscalIndex
countrylists<-educationalData$CountryCode[fiscalIndex]
countrylists
countriesData$X[countrylists]
contu<-countriesData$X[countrylists]
countriesData$X.1[countrylists]
fiscalIndex=grepl("Fiscal year end: June",educationalData$Special.Notes)
fiscalIndex
count(fiscalIndex
)
sum(fiscalIndex)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
amzn
head(sampleTimes)
sampleTimes
install.packages("lubridate")
library(lubridate)
year(sampleTimes)
grepl("2012",year(sampleTimes))
sum(grepl("2012",year(sampleTimes)))
wday(sampleTimes)
wday(sampleTimes,label = TRUE)
grepl("Mon",wday(sampleTimes,label = TRUE))
sum(grepl("Mon",wday(sampleTimes,label = TRUE)))
validIndex<-grepl("2012",year(sampleTimes))
sampleTimes[validIndex]
wday(sampleTimes[validIndex],label =
TRUE)
grepl("Mon",wday(sampleTimes[validIndex],label = TRUE))
sum(grepl("Mon",wday(sampleTimes[validIndex],label = TRUE)))
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
package_version(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm
rm(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
select(cran)
cran
select(cran,-time)
select(cran,-x:size)
select(cran,-(x:size))
select(cran,-5:20)
select(cran,-(5:20))
-5:20
-(5:20)
select(cran,-(5:20))
select(cran,-(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter((cran, country == "US" country == "IN"))
filter( (cran, country == "US" | country == "IN"))
filter(cran, ( country == "US" | country == "IN") )
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os = "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu" )
filter(cran, size > 100500, r_os == "linux-gnu" )
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version) )
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, --, ip_id,package,size)
cran3<-select( cran, --, ip_id,package,size )
cran3<-select( cran, ip_id,package,size )
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
cran3
mutate(cran3, size_mb = size /2^20, size_gb =size_mb / 2^10)
mutate(cran3, correct_size = size + 1000 )
summarize(cran, avg_bytes = mean (size))
library(swirl)
swirl
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm
rm("mydf")
cran
group_by(cran,cran$package)
group_by(cran,package)
?group_by
group_by(cran,package)
by_package <- group_by(cran, package)
by_package
summarize(cran,mean(size))
summarize(by_package,mean(size))
?n
?n_distinct
submit()
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
view( top_counts )
View( top_counts )
top_counts_sorted <- arrange(top_counts,count)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex , count , -grade)
students2
res<-gather(students2,sex_class, count)
res<-gather(students2,sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into=c("sex","class"))
submit()
students3
?gather
submit
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
students4
submit()
submit()
submit()
?unique
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- passed %>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
bind_rows(passed,failed)
sat
?select
?gather
?separate
submit()
submit()
submit()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridate)
help
help(package="lubridate")
help(package=lubridate)
today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms(03:22:14)
hms("03:22:14")
dt2
ymd(dt2)
update(hms("08:34:55"),hours = 8, minutes = 34, seconds = 55
)
update(hms("08:34:55"),hours = 8, minutes = 34, seconds = 55 )
update("08:34:55",hours = 8, minutes = 34, seconds = 55 )
update(hms("08:34:55"),hours = 8, minutes = 34, seconds = 55 )
update(this_moment,hours = 8, minutes = 34, seconds = 55 )
this_moment
update(this_moment)
this_moment <- update(this_moment, hours= 10 , minutes=16, seconds = 0)
this_moment <- update(this_moment, hours=10 , minutes=16, seconds=0)
this_moment <- update(this_moment, hours=10 , minutes=16, seconds=0)
this_moment
nyc<-now("America/New_York")
nys
nyc
depart<-nyc+days(2)
depart
depart<-update(depart,hours=17,minutes=34)
depart
arrive<-depart + hours(15) + minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm,col="blue")
abline
abline(h=12)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col=""green)
hist(ppm,col="green")
abline(v=12)
abline(v=12,lwd=2)
abline
abline
abline/(v=media(ppm),col="magenta",lwd=4)
abline/(v=media(ppm), col="magenta", lwd=4)
abline(v=media(ppm), col="magenta", lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
?plotxy
setwd("C:/Users/Atutu/Documents/Data_Scientist_Johns_Hopkins/4_Data_Analysis/Project1/ExData_Plotting1")
source("plot2.R")
plot2()
source("plot2.R")
plot2()
dev.off()
dev.off()
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
?par
source("plot2.R")
plot2()
dev.off()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot3.R")
plot3()
usedData <- read.csv("reducedData.txt",header = TRUE,sep=";")
usedData$Sub_metering_1
source("plot3.R")
plot3()
dev.off()
dev.off()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot4.R")
plot4()
dev.off()
source("plot4.R")
plot4()
?min()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
dev.off()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
source("plot3.R")
plot3()
Sys.getlocale()
Sys.getlocale()[[LC_TIME]]
Sys.getlocale()[LC_TIME]
Sys.getlocale(LC_TIME)
Sys.getlocale("LC_TIME")
source("plot3.R")
plot3()
source("plot2.R")
plot2()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
